apply plugin: 'java-library'
apply plugin: 'org.akhikhl.gretty'
apply plugin: 'war'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'


buildscript {
    repositories {
    jcenter()
    }
    dependencies {
        classpath 'org.akhikhl.gretty:gretty:+'
    }
}


repositories {
  jcenter()
  
  // used for kieker and teetime snapshots
  maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
   maven { url 'https://jitpack.io' }
}


// # Uncomment lines below to force dependency downloading (e.g. when explorviz-backend was updated)
configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


configurations {
	provided
	compile.extendsFrom(provided)
}


dependencies {
  	// Core logic
  	//implementation 'com.github.ExplorViz:explorviz-backend-extension-modeleditor:master-SNAPSHOT'
  	compile 'com.github.ExplorViz:explorviz-backend-extension-modeleditor:master-SNAPSHOT'
	
    //compile fileTree(dir: 'libs', include: '*.jar')

	// local linking (explorviz backend project)
	//compile project(':explorviz-backend')
	//compile project(':explorviz-backend-kiekeradapter')
  
 	// Dependency for this subproject. Add your dependencies in the same way.
  	//provided group: 'de.sven-jacobs', name: 'loremipsum', version: '1.0'

    testCompile 'junit:junit:4.12'
}


// Don't build war when tests fail
war.dependsOn check


// War plugin typically disables jar build
assemble.dependsOn jar

// Build .jar file with your "provided" dependencies only
jar {
  baseName = project.name 
  from configurations.provided.asFileTree.files.collect { zipTree(it) }
}


// Tooling
pmd {
	ignoreFailures = false
	// Clear the rule set first. Otherwise we would have a lot of additional rules in our rule set.
	ruleSets = []
	ruleSetFiles = files("conf/pmd.xml")
}

    
checkstyle {
	ignoreFailures = false
	showViolations = false
	configFile = file("conf/checkstyle.xml")
}

findbugs {
	reportLevel = "low"
	ignoreFailures = false
	effort = "max"
}


// Renaming Dummy task
// Run with ./gradlew renameProject -PextensionName="X"
task renameProject() {
  if (project.hasProperty('extensionName')) {
  
	// temporary dir for modification (needed for Win OS based on current gradle implementation)
	def tmpDir = 'tmp'
	
	// default src dir
	def srcDir = 'src'
	
	// default base dir
	def baseDir = '.'
	
	// Rename dummy package and replace dummy string import declarations
    def newExtensionName = project.property('extensionName')
    def javaSrcDir = srcDir + '/main/java/net/explorviz/extension/'
	
	println("Trying to rename backend extension from dummy to: " + newExtensionName)
	
	// initial setup
	// copy src folder to tmp dir for modification
	copy {	
		from srcDir
		into tmpDir + '/' + srcDir
	}
		
	// delete old src folder
	delete srcDir
		
	// Rename dummy package and replace dummy string import declarations
	copy {
		from tmpDir + '/' + javaSrcDir + 'dummy'
		filter{it.replaceAll("\\.dummy\\.", "\\." + newExtensionName + "\\.")}
		into javaSrcDir + newExtensionName
	}
		
	// Replace dummy string in .project
    String file = new File(".project").getText("UTF-8")
    file = file.replaceAll("-dummy", "-" + newExtensionName)
    new File(tmpDir + '/' + ".project").write(file, "UTF-8")
	
	// Replace dummy string in settings.gradle
    file = new File("settings.gradle").getText("UTF-8")
    file = file.replaceAll("-dummy", "-" + newExtensionName)
    new File(tmpDir + '/' + "settings.gradle").write(file, "UTF-8")
	
	// java src files 
	copy {	
		from tmpDir + '/' + srcDir
		into srcDir
	}
		
	// .project + settings.gradle
	copy {	
		from tmpDir
		into baseDir
		include '.project'
		include 'settings.gradle'
	}
		
	//cleanup
	delete javaSrcDir + '/dummy'
	delete tmpDir
		
	println("Backend extension renamed to: " + newExtensionName)
  }
}


// Embedded Webserver
gretty {
  httpPort = 8081
  servletContainer = 'jetty9'
  contextPath = '/'
  recompileOnSourceChange = false
  reloadOnClassChange = false
  reloadOnConfigChange = false
  reloadOnLibChange = false
}
